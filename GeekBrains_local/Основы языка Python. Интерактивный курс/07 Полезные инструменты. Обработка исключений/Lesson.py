# 1: Даны два списка фруктов. Получить список фруктов, присутствующих в обоих исходных списках.
# Примечание: Списки фруктов создайте вручную в начале файла.
from math import sqrt
from random import sample as s, randint as r


def separator():
    print('-' * 70)


fruits = ['Гранат', 'Инжир', 'Лимон', 'Персик', 'Огурец', 'Ананас', 'Банан', 'Киви',
          'Гранат', 'Инжир', 'Лимон', 'Персик', 'Хурма', 'Яблоко', 'Арбуз', 'Апельсин']

fruits_list1 = list(set(s(fruits, r(1, len(fruits)))))
fruits_list2 = list(set(s(fruits, r(1, len(fruits)))))

print(f'\033[1m' + '**Задание 1**' + '\033[0m' + f'\nСписок 1:\n{fruits_list1}\nСписок 2:\n{fruits_list2}\nОбщие '
                                                 f'элементы:')
print([i for i in fruits_list1 if i in fruits_list2])
separator()


# 2: Дан список, заполненный произвольными числами.
# Получить список из элементов исходного, удовлетворяющих следующим условиям:
# Элемент кратен 3,
# Элемент положительный,
# Элемент не кратен 4.
def elements(user_list=[x for x in range(-r(1, 21), r(1, 21))]):
    out_list = [x for x in user_list if x % 3 == 0 and x > 0 and x % 4 != 0]
    print(f'\033[1m' + '\n**Задание 2**' + '\033[0m' + f'\nНачальный список:\n{user_list}\nСписок удовлетворяющий '
                                                       f'условиям:\n{out_list}')


elements()
separator()


# 3. Напишите функцию которая принимает на вход список.
# Функция создает из этого списка новый список из квадратных корней чисел (если число положительное)
# и самих чисел (если число отрицательное) и возвращает результат
# (желательно применить генератор и тернарный оператор при необходимости).
# В результате работы функции исходный список не должен измениться.
# Например:
# old_list = [1, -3, 4]
# result = [1, -3, 2]

def elements2(user_list=[x for x in range(-r(1, 21), r(1, 21))]):
    out_list = [x if x <= 0 else (int(sqrt(x)) if sqrt(x).is_integer() else sqrt(x)) for x in user_list]
    print(f'\033[1m' + '\n**Задание 3**' + '\033[0m' + f'\nНачальный список:\n{user_list}\nСписок удовлетворяющий '
                                                       f'условиям:\n{out_list}')


elements2()
separator()


# 4. Написать функцию которая принимает на вход число от 1 до 100. Если число равно 13, функция поднимает
# исключительную ситуации ValueError иначе возвращает введенное число, возведенное в квадрат.
# Далее написать основной код программы.
# Пользователь вводит число.
# Введенное число передаем параметром в написанную функцию и печатаем результат, который вернула функция.
# Обработать возможность возникновения исключительной ситуации, которая поднимается внутри функции.

def devil_num(user_num=r(1, 101)):
    if user_num == 13:
        raise Exception(ValueError)
    else:
        print(f'\nВведенное число: {user_num}\nКвадрат числа: {user_num ** 2}')


user_num = input('\033[1m' + '\n**Задание 4**' + '\033[0m' + '\nВведите число или Enter для автогенератора.')
if user_num:
    try:
        devil_num(int(user_num))
    except:
        print('Тысяча чертей!')
else:
    devil_num()
